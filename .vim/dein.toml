[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  set t_Co=256
  let g:jellybeans_use_term_italics = 0
  let g:jellybeans_use_gui_italics = 0
  let g:jellybeans_overrides = {
  \   'background': { 'guibg': '000000' },
  \   'SpecialKey': { 'guifg': '303030', 'guibg': '', 'ctermbg': '' },
  \   'NonText':    { 'guifg': '303030', 'guibg': '', 'ctermbg': '' },
  \   'Search':     { 'guibg': '', 'ctermbg': '' },
  \ }
  autocmd myinit VimEnter * nested colorscheme jellybeans
  " vimdiffの色設定
  autocmd myinit ColorScheme * highlight DiffAdd    ctermbg=22
  autocmd myinit ColorScheme * highlight DiffDelete ctermbg=52
  autocmd myinit ColorScheme * highlight DiffChange ctermbg=17
  autocmd myinit ColorScheme * highlight DiffText   ctermbg=21
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
  let g:polyglot_disabled = []
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " s で split
  call denite#custom#map('normal', "s", '<denite:do_action:split>')

  " v で vsplit
  call denite#custom#map('normal', "v", '<denite:do_action:vsplit>')

  " C-j, C-k で上下移動
  call denite#custom#map('normal', '<C-j>', '<denite:move_to_next_line>')
  call denite#custom#map('normal', '<C-k>', '<denite:move_to_previous_line>')
  call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>')
  call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>')

  " <Space>/ で grep
  nnoremap <silent> <Space>/
  \ :<C-u>Denite grep -no-empty -mode=normal<CR>

  " <Space><Space>/ で grep(プロジェクト単位)
  nnoremap <silent> <Space><Space>/
  \ :<C-u>DeniteProjectDir grep -no-empty -mode=normal<CR>

  " <Space>k で単語単位 grep
  nnoremap <silent> <Space>k
  \ :<C-u>Denite grep/word:::<C-r><C-w>
  \ -no-empty -mode=normal<CR>

  " <Space><Space>k で単語単位 grep(プロジェクト単位)
  nnoremap <silent> <Space><Space>k
  \ :<C-u>DeniteProjectDir grep/word:::<C-r><C-w>
  \ -no-empty -mode=normal<CR>

  " <Space>r で検索結果を開き直す
  nnoremap <silent> <Space>r :<C-u>Denite -resume
  \ -no-empty -mode=normal<CR>

  " <Space>n で次の検索結果へ
  nnoremap <silent> <Space>n :<C-u>Denite -resume
  \ -cursor-pos=+1 -immediately<CR>

  " <Space>f でファイル一覧
  nnoremap <silent> <Space>f :<C-u>Denite file/rec
  \ -no-empty<CR>

  " <Space><Space>f でプロジェクトファイル一覧
  nnoremap <silent> <Space><Space>f :<C-u>DeniteProjectDir file/rec
  \ -no-empty<CR>

  " <Space>o で oldfiles 一覧
  nnoremap <silent> <Space>o :<C-u>Denite file/old
  \ -no-empty<CR>

  " <Space>d で dotfiles 編集
  call denite#custom#alias('source', 'file/rec/dot', 'file/rec')
  nnoremap <silent> <Space>d :<C-u>call denite#start(
  \ [{'name': 'file/rec/dot', 'args': ['~/dotfiles']}])<CR>

  " ripgrep 使用
  if executable('rg')
    " file/rec 探索用
    call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git'])

    " grep
    call denite#custom#var('grep', 'command',
    \ ['rg', '--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'default_opts', [])
    call denite#custom#var('grep', 'recursive_opts', [])

    " grep(word単位)
    call denite#custom#alias('source', 'grep/word', 'grep')
    call denite#custom#var('grep/word', 'command',
    \ ['rg', '--vimgrep', '--no-heading', '--word-regexp'])
    call denite#custom#var('grep/word', 'default_opts', [])
    call denite#custom#var('grep/word', 'recursive_opts', [])

    " 現在の fileencoding に合わせて rg の encoding を変更
    function! AU_SetRipGrepEncoding()
      if &fileencoding == 'cp932'
        call denite#custom#var('grep', 'command',
        \ ['rg', '--vimgrep', '--no-heading', '-ESJIS'])
        call denite#custom#var('grep/word', 'command',
        \ ['rg', '--vimgrep', '--no-heading', '--word-regexp', '-ESJIS'])
      else
        call denite#custom#var('grep', 'command',
        \ ['rg', '--vimgrep', '--no-heading'])
        call denite#custom#var('grep/word', 'command',
        \ ['rg', '--vimgrep', '--no-heading', '--word-regexp'])
      endif
    endfunction
    autocmd myinit BufReadPost * call AU_SetRipGrepEncoding()
  endif
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap [git]  <Nop>
  nmap <Space>g [git]
  nnoremap <silent> [git]s :Gstatus<CR>
  nnoremap <silent> [git]d :Gvdiff<CR>
  nnoremap <silent> [git]b :Gblame<CR>
  nnoremap <silent> [git]c :Gcommit-v<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set updatetime=100
  nmap [git]g <Plug>GitGutterStageHunk
  nmap [git]u <Plug>GitGutterUndoHunk
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  nnoremap <silent> [git]l :Agit<CR>
  nnoremap <silent> [git]f :AgitFile<CR>
'''

[[plugins]]
repo='prabirshrestha/async.vim'

[[plugins]]
repo='prabirshrestha/vim-lsp'
hook_add='''
  if executable('clangd')
    augroup LspCpp
      au!
      autocmd User lsp_setup call lsp#register_server({
      \   'name': 'clangd',
      \   'cmd': {server_info->['clangd']},
      \   'whitelist': ['c', 'cpp'],
      \ })
      autocmd FileType c setlocal omnifunc=lsp#complete
      autocmd FileType cpp setlocal omnifunc=lsp#complete
    augroup END
  endif

  if executable('solargraph')
    augroup LspRuby
      au!
      autocmd User lsp_setup call lsp#register_server({
      \   'name': 'solargraph',
      \   'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
      \   'initialization_options': {"diagnostics": "true"},
      \   'whitelist': ['ruby'],
      \ })
      autocmd FileType ruby setlocal omnifunc=lsp#complete
    augroup END
  endif

  let g:lsp_async_completion = 0
  let g:lsp_diagnostics_enabled = 0
'''

[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  function! MyFileEncoding()
    return &bomb ? &fileencoding . '(BOM)' : &fileencoding
  endfunction

  let g:lightline = {
  \   'colorscheme': 'jellybeans',
  \   'active': {
  \     'left': [ [ 'mode', 'paste' ],
  \               [ 'gitbranch', 'readonly', 'filename', 'modified', 'anzu' ] ],
  \     'right': [ [ 'lineinfo' ],
  \                [ 'percent' ],
  \                [ 'fileformat', 'myfileencoding', 'filetype' ] ]
  \   },
  \   'inactive': {
  \     'left': [ [ 'mode', 'paste' ],
  \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
  \     'right': [ [ 'lineinfo' ],
  \                [ 'percent' ],
  \                [ 'fileformat', 'myfileencoding', 'filetype' ] ]
  \   },
  \   'component_function': {
  \     'gitbranch': 'fugitive#head',
  \     'anzu': 'anzu#search_status',
  \     'myfileencoding': 'MyFileEncoding'
  \   },
  \ }

  " show statusbar
  set laststatus=2

  " hide --INSERT--
  set noshowmode
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n)zz
  nmap N <Plug>(anzu-N)zz
  nmap * <Plug>(anzu-star)zz
  nmap # <Plug>(anzu-sharp)zz

  " ウインドウを移動したとき、タブを移動したときに
  " 検索ヒット数の表示を消去する
  autocmd myinit WinLeave,TabLeave * call anzu#clear_search_status()

  " C-l でハイライト、検索ヒット数の表示を消去
  nnoremap <silent> <C-l> 
  \ :<C-u>nohlsearch<CR>
  \ :<C-u>call anzu#clear_search_status()<CR>
  \ <C-l>
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-w><C-e>'
  let g:winresizer_vert_resize = 1
  let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
  " :Tnew の場合に挿入モードで開始
  let g:neoterm_autoinsert = 1

  " :T {cmd} 実行時に画面スクロールする
  let g:neoterm_autoscroll = 1

  " 横分割
  let g:neoterm_default_mod = 'belowright'

  " :Tnew 実行
  nnoremap <silent> <Space>tt :Tnew<CR>

  " <Esc> で terminal-mode を抜ける
  tnoremap <Esc> <C-\><C-n>

  " <C-w> で ウィンドウ移動
  tnoremap <C-w><C-w> <C-\><C-n><C-w><C-w>
  tnoremap <C-w><C-j> <C-\><C-n><C-w><C-j>
  tnoremap <C-w><C-k> <C-\><C-n><C-w><C-k>
  tnoremap <C-w><C-h> <C-\><C-n><C-w><C-h>
  tnoremap <C-w><C-l> <C-\><C-n><C-w><C-l>
'''

[[plugins]]
repo = 'thoughtbot/vim-rspec'
hook_add = '''
  let g:rspec_command = "!bin/rspec {spec}"
  nnoremap <silent> <Space>tc :call RunCurrentSpecFile()<CR>
  nnoremap <silent> <Space>tn :call RunNearestSpec()<CR>
  nnoremap <silent> <Space>tl :call RunLastSpec()<CR>
  nnoremap <silent> <Space>ta :call RunAllSpecs()<CR>
'''

