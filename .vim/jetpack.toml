[[plugins]]
repo = 'tani/vim-jetpack'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  set t_Co=256
  let g:jellybeans_use_term_italics = 0
  let g:jellybeans_use_gui_italics = 0
  let g:jellybeans_overrides = {
  \   'background': { 'guibg': '000000' },
  \   'SpecialKey': { 'guifg': '303030', 'guibg': '', 'ctermbg': '' },
  \   'NonText':    { 'guifg': '303030', 'guibg': '', 'ctermbg': '' },
  \   'Search':     { 'guibg': '', 'ctermbg': '' },
  \ }
  autocmd myinit VimEnter * nested colorscheme jellybeans
  " vimdiffの色設定
  autocmd myinit ColorScheme * highlight DiffAdd    ctermbg=22
  autocmd myinit ColorScheme * highlight DiffDelete ctermbg=52
  autocmd myinit ColorScheme * highlight DiffChange ctermbg=17
  autocmd myinit ColorScheme * highlight DiffText   ctermbg=21
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
depends = [
  'mattn/ctrlp_matchfuzzy',
]
hook_add = '''
  let g:ctrlp_working_path_mode = 'd'
  let g:ctrlp_clear_cache_on_exit = 0
  let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.svn|\.hg|test)$',
  \ 'file': '\v\.(exe|so|dll|o|obj|lib|d|s|lst|i|bak)$',
  \ }
  let g:ctrlp_max_files = 0
  let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
'''

[[plugins]]
repo = 'mattn/ctrlp-matchfuzzy'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  function! MyFileEncoding()
    return &bomb ? &fileencoding . '(BOM)' : &fileencoding
  endfunction

  let g:lightline = {
  \   'colorscheme': 'jellybeans',
  \   'active': {
  \     'left': [ [ 'mode', 'paste' ],
  \               [ 'gitbranch', 'readonly', 'filename', 'modified', 'anzu' ] ],
  \     'right': [ [ 'lineinfo' ],
  \                [ 'percent' ],
  \                [ 'fileformat', 'myfileencoding', 'filetype' ] ]
  \   },
  \   'inactive': {
  \     'left': [ [ 'mode', 'paste' ],
  \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
  \     'right': [ [ 'lineinfo' ],
  \                [ 'percent' ],
  \                [ 'fileformat', 'myfileencoding', 'filetype' ] ]
  \   },
  \   'component_function': {
  \     'gitbranch': 'fugitive#head',
  \     'anzu': 'anzu#search_status',
  \     'myfileencoding': 'MyFileEncoding'
  \   },
  \ }

  " show statusbar
  set laststatus=2

  " hide --INSERT--
  set noshowmode

  augroup LightlineColorscheme
    autocmd!
    autocmd ColorScheme * call s:lightline_update()
  augroup END

  function! s:lightline_update()
    if !exists('g:loaded_lightline')
      return
    endif
    try
      if g:colors_name =~# 'wombat\|solarized\|landscape\|jellybeans\|seoul256\|Tomorrow'
        let g:lightline.colorscheme =
              \ substitute(substitute(g:colors_name, '-', '_', 'g'), '256.*', '', '')
        call lightline#init()
        call lightline#colorscheme()
        call lightline#update()
      endif
    catch
    endtry
  endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n)zz
  nmap N <Plug>(anzu-N)zz
  nmap * <Plug>(anzu-star)zz
  nmap # <Plug>(anzu-sharp)zz

  " ウインドウを移動したとき、タブを移動したときに
  " 検索ヒット数の表示を消去する
  autocmd myinit WinLeave,TabLeave * call anzu#clear_search_status()

  " C-l でハイライト、検索ヒット数の表示を消去
  nnoremap <silent> <C-l> 
  \ :<C-u>nohlsearch<CR>
  \ :<C-u>call anzu#clear_search_status()<CR>
  \ <C-l>
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-w><C-e>'
  let g:winresizer_vert_resize = 1
  let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
  if executable('rg')
    let g:ackprg = "rg --vimgrep"
  endif
  let g:ack_use_dispatch = 1
  let g:ackhighlight = 1
  let g:ack_autoclose = 1
  let g:ack_mappings = {"<ESC>": ":cclose<CR>"}
'''

